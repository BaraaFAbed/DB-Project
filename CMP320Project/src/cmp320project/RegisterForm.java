/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cmp320project;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author baraa
 */
public class RegisterForm extends javax.swing.JFrame {
    
    // Database connection handler
    myDBCon dbCon;

    // ResultSet to hold the data fetched from the database
    ResultSet rs;

    // Encryption handler to hash passwords using MD5
    EncryptionMD5 md5;

    /**
     * Creates new form RegisterForm
     */
    public RegisterForm() {
        initComponents();
        
        //Creating connection to DB
        dbCon = new myDBCon();
        
         // Instantiate the MD5 encryption handler
        md5 = EncryptionMD5.getInstance();

        // Center the form on the screen
        this.setLocationRelativeTo(null);
        
        // Set the error message labels to invisible upon form creation
        lblUsernameError.setVisible(false);
        lblEmailError.setVisible(false);
        lblPasswordError.setVisible(false);
        lblConfirmPasswordError.setVisible(false);
        lblNameError.setVisible(false);
        lblCNameError.setVisible(false);
        
        // Populate user types into the combo box
        cmbAccountType.addItem("Customer");
        cmbAccountType.addItem("Supplier");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddNewUser = new javax.swing.JButton();
        lblUsernameError = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblConfirmPasswordError = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblPasswordError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblNameError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        TogglePasswordBtn = new javax.swing.JToggleButton();
        jLabel8 = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();
        txtUsername = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        cmbAccountType = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        lblEmailError = new javax.swing.JLabel();
        ToggleConfirmPasswordBtn = new javax.swing.JToggleButton();
        txtEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        lblCNameError = new javax.swing.JLabel();
        txtCName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnAddNewUser.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnAddNewUser.setText("Register");
        btnAddNewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewUserActionPerformed(evt);
            }
        });

        lblUsernameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblUsernameError.setForeground(new java.awt.Color(255, 0, 0));
        lblUsernameError.setText("error label");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Register Account");

        lblConfirmPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblConfirmPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblConfirmPasswordError.setText("error label");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Username:");

        lblPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblPasswordError.setText("error label");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Password:");

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Confirm Password:");

        txtPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Type:");

        TogglePasswordBtn.setBackground(new java.awt.Color(255, 255, 255));
        TogglePasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmp320project/SeePwdResized.png"))); // NOI18N
        TogglePasswordBtn.setToolTipText("Show password");
        TogglePasswordBtn.setMinimumSize(new java.awt.Dimension(522, 523));
        TogglePasswordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TogglePasswordBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Name:");

        txtConfirmPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbAccountType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbAccountType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAccountTypeActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Email:");

        lblEmailError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEmailError.setForeground(new java.awt.Color(255, 0, 0));
        lblEmailError.setText("error label");

        ToggleConfirmPasswordBtn.setBackground(new java.awt.Color(255, 255, 255));
        ToggleConfirmPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmp320project/SeePwdResized.png"))); // NOI18N
        ToggleConfirmPasswordBtn.setToolTipText("Show password");
        ToggleConfirmPasswordBtn.setMinimumSize(new java.awt.Dimension(522, 523));
        ToggleConfirmPasswordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleConfirmPasswordBtnActionPerformed(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Company Name:");

        lblCNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblCNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblCNameError.setText("error label");

        txtCName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(98, 98, 98)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel2)
                                .addComponent(jLabel8)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addComponent(txtName)
                                .addComponent(txtUsername)
                                .addComponent(txtCName))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblNameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblUsernameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblEmailError, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblCNameError, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(195, 195, 195)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddNewUser)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TogglePasswordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cmbAccountType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtConfirmPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ToggleConfirmPasswordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblConfirmPasswordError, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .addComponent(lblPasswordError, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsernameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblEmailError)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblCNameError)
                    .addComponent(txtCName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPasswordError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TogglePasswordBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ToggleConfirmPasswordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblConfirmPasswordError)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbAccountType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddNewUser)
                .addGap(29, 29, 29))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtEmail, txtUsername});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void clearErrorLabels() {
        // erase error label text and set visibility to false
        lblUsernameError.setText("");
        lblUsernameError.setVisible(false);
        lblPasswordError.setText("");
        lblPasswordError.setVisible(false);
        lblConfirmPasswordError.setText("");
        lblConfirmPasswordError.setVisible(false);
        lblNameError.setText("");
        lblNameError.setVisible(false);
        lblEmailError.setText("");
        lblEmailError.setVisible(false);
        lblCNameError.setText("");
        lblCNameError.setVisible(false);
    }
    
    /**
    * Validates if the entered password and its confirmation match and are not empty.
    *
    * @return true if the password is valid, otherwise false.
    */
    boolean isValidPassword() {
       boolean result = true; 

       // Check if password is empty
       if (txtPassword.getText().trim().isEmpty()) {
           lblPasswordError.setText("Invalid. Cannot be empty.");
           lblPasswordError.setVisible(true);
           result = false;
       }

       // Check if confirmation matches the password
       if (!txtConfirmPassword.getText().trim().equals(txtPassword.getText().trim())) {
           lblConfirmPasswordError.setText("Invalid. Password does not match.");
           lblConfirmPasswordError.setVisible(true);
           result = false;
       }

       return result;
   }
    
   /**
    * Checks if a username already exists in the database.
    *
    * @param username The username to check for duplicates.
    * @return true if the username already exists, otherwise false.
    * @throws SQLException If there's an error executing the SQL query.
    */
    private boolean isDuplicate(String username) throws SQLException {
        String stmtSQL = "SELECT username FROM account WHERE username = '" + username.toLowerCase()+ "'";
        rs = dbCon.executeStatement(stmtSQL);

        // Check if the resultset has data which indicates a duplicate
        return rs.isBeforeFirst();
    }
    
    /**
    * Validates the data entered by the user.
    *
    * @return true if the entered data is valid, otherwise false.
    */
   boolean isValidData() {
       boolean result = true;

       // Check if name is empty or too long
       if (txtName.getText().trim().isEmpty() || (txtName.getText().trim().length() > 20)) {
           if (txtName.getText().trim().isEmpty()) {
               lblNameError.setText("Invalid. Cannot be empty.");
           } else if (txtName.getText().trim().length() > 20) {
               lblNameError.setText("Invalid. Must be < 21 chars.");
           }
           lblNameError.setVisible(true);
           result = false;
       }

       // Check if username is empty or too long
       if (txtUsername.getText().trim().isEmpty() || (txtUsername.getText().trim().length() > 30)) {
           if (txtUsername.getText().trim().isEmpty()) {
               lblUsernameError.setText("Invalid. Cannot be empty.");
           } else if (txtUsername.getText().trim().length() > 30) {
               lblUsernameError.setText("Invalid. Must be < 31 chars.");
           }
           lblUsernameError.setVisible(true);
           result = false;
       }
       
       // Check if email is too long
       if (txtEmail.getText().trim().length() > 30) {
           if (txtEmail.getText().trim().length() > 30) {
               lblUsernameError.setText("Invalid. Must be < 31 chars.");
           }
           lblEmailError.setVisible(true);
           result = false;
       }
       
       // Check if Company Name is empty or too long
       if (txtCName.getText().trim().isEmpty() || (txtCName.getText().trim().length() > 20)) {
           if (txtCName.getText().trim().isEmpty()) {
               lblCNameError.setText("Invalid. Cannot be empty.");
           } else if (txtCName.getText().trim().length() > 20) {
               lblCNameError.setText("Invalid. Must be < 21 chars.");
           }
           lblCNameError.setVisible(true);
           result = false;
       }

       return result;
   }
   
   /**
    * Clears all the input fields and resets them to default values.
    */
   void clearInputBoxes() {
       txtName.setText("");
       txtUsername.setText("");
       txtPassword.setText("");
       txtConfirmPassword.setText("");
       txtCName.setText("");
       cmbAccountType.setSelectedIndex(0);  // Set user type combo box to default value
   }
   
   /**
    * Validates all the user input fields.
    *
    * @return true if all entered data is valid, otherwise false.
    */
   boolean isValidAll() {
       clearErrorLabels();
       boolean result = isValidData();

       // Ensure both data and password are valid
       return isValidPassword() && result;
   }
    
   
   /**
    * Handles the click event of the button used to add a new customer.
    *
    * @param evt The event object associated with the action.
    */
    private void btnAddNewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewUserActionPerformed
        try {
            // Check if the entered data is valid and the username does not already exist in the database.
            if (isValidAll() && !isDuplicate(txtUsername.getText().trim())) {

                // Prepare SQL query to insert the new user into the database.
                // The password is hashed using the MD5 algorithm.
                String prepSQL = "INSERT INTO account (username, password, name, accounttype, email) VALUES ('"
                + txtUsername.getText().trim().toLowerCase() + "', "
                + "'" + md5.getMD5(txtPassword.getText().trim()) + "', "
                + "'" + txtName.getText().trim() + "', "
                + "'" + cmbAccountType.getSelectedItem().toString().toLowerCase() + "', "
                + "'" + txtEmail.getText().trim() + "')";

                // Execute the prepared SQL statement.
                int result = dbCon.executePrepared(prepSQL);
                
                // Inserting company name for suppliers
                String prepSQL1 = "";
                
                if (cmbAccountType.getSelectedItem().toString().equalsIgnoreCase("Supplier"))
                {
                    prepSQL1 = "INSERT INTO supplier values ('"
                    + txtUsername.getText().trim().toLowerCase() + "', "
                    + "'" + txtCName.getText().trim().toLowerCase() + "')";    
                }
                else // Inserting into customers
                {
                    prepSQL1 = "INSERT INTO customer values ('"
                    + txtUsername.getText().trim().toLowerCase() + "', "
                    + "0.00)";  
                }
                int result1 = dbCon.executePrepared(prepSQL1);
                
                // If the SQL statement executed successfully and a new user was added,
                // inform the user with a success message.
                if (result > 0 && result1 > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Registerd successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    // Clear the input fields after successful insertion.
                    clearInputBoxes();
                    this.dispose();
                } // Handle other cases where the user was not added. This section can be expanded.

                rs.close();
            } else {
                // If there are validation errors, inform the user to fix them.
                // Otherwise, inform the user if the entered username already exists.
                if (!isDuplicate(txtUsername.getText().trim())) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Username Already exists. Use a different username.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            // Handle any SQL exceptions and inform the user with an error message.
            JOptionPane.showMessageDialog(null, "Error registering new account.");
        }
    }//GEN-LAST:event_btnAddNewUserActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void TogglePasswordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TogglePasswordBtnActionPerformed

        // Check if the toggle button is selected.
        if (TogglePasswordBtn.isSelected())
        {
            // If the toggle button is selected, set the echo characters of the password and confirm password fields to 0.
            // This effectively makes the characters in these fields visible.
            txtPassword.setEchoChar((char)0);
        }
        else
        {
            // If the toggle button is not selected, set the echo characters of the password and confirm password fields to '•'.
            // This hides the characters in these fields, replacing them with '•' symbols.
            txtPassword.setEchoChar('•');
        }
    }//GEN-LAST:event_TogglePasswordBtnActionPerformed

    private void ToggleConfirmPasswordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleConfirmPasswordBtnActionPerformed
        // Check if the toggle button is selected.
        if (ToggleConfirmPasswordBtn.isSelected())
        {
            // If the toggle button is selected, set the echo characters of the password and confirm password fields to 0.
            // This effectively makes the characters in these fields visible.
            txtConfirmPassword.setEchoChar((char)0);
        }
        else
        {
            // If the toggle button is not selected, set the echo characters of the password and confirm password fields to '•'.
            // This hides the characters in these fields, replacing them with '•' symbols.
            txtConfirmPassword.setEchoChar('•');
        }
    }//GEN-LAST:event_ToggleConfirmPasswordBtnActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtCNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCNameActionPerformed

    private void cmbAccountTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAccountTypeActionPerformed
        if(cmbAccountType.getSelectedItem().toString().equalsIgnoreCase("customer"))
        {
            txtCName.setEditable(false);
            txtCName.setText("Suppliers Only");
        }
        else
        {
            txtCName.setText("");
            txtCName.setEditable(true);
        }
    }//GEN-LAST:event_cmbAccountTypeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ToggleConfirmPasswordBtn;
    private javax.swing.JToggleButton TogglePasswordBtn;
    private javax.swing.JButton btnAddNewUser;
    private javax.swing.JComboBox<String> cmbAccountType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblCNameError;
    private javax.swing.JLabel lblConfirmPasswordError;
    private javax.swing.JLabel lblEmailError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPasswordError;
    private javax.swing.JLabel lblUsernameError;
    private javax.swing.JTextField txtCName;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
