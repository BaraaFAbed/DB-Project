package cmp320project;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author baraa
 */
public class UpdateDeleteEmployee extends javax.swing.JFrame {

    // Instance variables
    myDBCon dbCon;              // Database connection object
    ResultSet rs;               // Result set for account data
    LoginUser user;             // Stores currently logged in user
    String ogUsername;          // Stores the username of the currently shown employee
    EncryptionMD5 md5;         // Stores MD5 hasher

    // Constructor
    public UpdateDeleteEmployee(LoginUser _user) {
        // Initializes GUI components created using the form editor in NetBeans or similar IDE
        initComponents();
        
        // Getting MD5 instance
        md5 = EncryptionMD5.getInstance();
        
        // getting user
        user = _user;
        
        // creating connection
        dbCon = new myDBCon();
        
        // Positions this JFrame to the center of the screen
        this.setLocationRelativeTo(null);
        
        // Populate employee type fields
        cmbEmployeeType.addItem("Normal");
        cmbEmployeeType.addItem("Admin");
        
        // set all error labels to invisible
        lblUsernameError.setVisible(false);
        lblEmailError.setVisible(false);
        lblPasswordError.setVisible(false);
        lblConfirmPasswordError.setVisible(false);
        lblNameError.setVisible(false);

        // Initialize the database connection
        dbCon = new myDBCon();
        
        // Fetch and display new data from the database to populate the form
        getNewData();
    }

    // This method fetches and sets the data from the database to populate the form's fields
    private void getNewData() {

        try {
            // Query to fetch account details of employees
            rs = dbCon.executeStatement("SELECT A.name, A.username, A.email, E.employeetype FROM account A, employee E WHERE A.username = E.username ORDER BY A.name ASC ");
            
            // Moves the cursor of the result set to the first row and populates the form fields with data
            rs.beforeFirst();
            rs.first();
            populateFields();
        } catch (SQLException e) {
            // Display an error message in case of any SQL exceptions
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected username.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lblNameError = new javax.swing.JLabel();
        lblEmailError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ToggleConfirmPasswordBtn = new javax.swing.JToggleButton();
        txtPassword = new javax.swing.JPasswordField();
        txtEmail = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lblPasswordError = new javax.swing.JLabel();
        TogglePasswordBtn = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        lblUsernameError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();
        lblConfirmPasswordError = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbEmployeeType = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Employee");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Employee");

        btnUpdate.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Email:");

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");

        lblEmailError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEmailError.setForeground(new java.awt.Color(255, 0, 0));
        lblEmailError.setText("error label");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Confirm Password:");

        ToggleConfirmPasswordBtn.setBackground(new java.awt.Color(255, 255, 255));
        ToggleConfirmPasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmp320project/SeePwdResized.png"))); // NOI18N
        ToggleConfirmPasswordBtn.setToolTipText("Show password");
        ToggleConfirmPasswordBtn.setMinimumSize(new java.awt.Dimension(522, 523));
        ToggleConfirmPasswordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleConfirmPasswordBtnActionPerformed(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Type:");

        lblPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblPasswordError.setText("error label");

        TogglePasswordBtn.setBackground(new java.awt.Color(255, 255, 255));
        TogglePasswordBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cmp320project/SeePwdResized.png"))); // NOI18N
        TogglePasswordBtn.setToolTipText("Show password");
        TogglePasswordBtn.setMinimumSize(new java.awt.Dimension(522, 523));
        TogglePasswordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TogglePasswordBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Password:");

        lblUsernameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblUsernameError.setForeground(new java.awt.Color(255, 0, 0));
        lblUsernameError.setText("error label");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Name:");

        txtConfirmPassword.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        lblConfirmPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblConfirmPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblConfirmPasswordError.setText("error label");

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Username:");

        cmbEmployeeType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbEmployeeType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEmployeeTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmail)
                            .addComponent(txtName)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TogglePasswordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ToggleConfirmPasswordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblConfirmPasswordError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblUsernameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEmailError, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .addComponent(lblPasswordError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(cmbEmployeeType, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(149, 149, 149))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addGap(173, 173, 173))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsernameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblEmailError)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPasswordError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TogglePasswordBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ToggleConfirmPasswordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblConfirmPasswordError)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbEmployeeType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateFields() {
        try {
            // Setting form fields with the current row's data from the result set.
            txtName.setText(rs.getString("name"));
            ogUsername = rs.getString("username");
            txtUsername.setText(rs.getString("username"));
            txtEmail.setText(rs.getString("email"));
            txtPassword.setText("");
            txtConfirmPassword.setText("");
            if (rs.getString("employeetype").equalsIgnoreCase("admin"))
            {
                cmbEmployeeType.setSelectedItem("Admin");
            }
            else
            {
                cmbEmployeeType.setSelectedItem("Normal");
            }
            
            
            // Update the navigation buttons' states.
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // This method moves the result set's cursor to the next record and populates the form fields.
    private void MoveNext() {
        try {
            if (!rs.isLast()) {
                rs.next(); 
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Trigger the MoveNext method when the Next button is pressed.
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    // This method moves the result set's cursor to the previous record and populates the form fields.
    private void MovePrevious() {
        try {
            // TODO add your handling code here:
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // This method updates the state of the navigation buttons based on the cursor's position in the result set.
    private void EnableDisableButtons() {
        try {
            // Disable the Previous button if we're at the first record.
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }

            // Disable the Next button if we're at the last record.
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeleteEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Trigger the MovePrevious method when the Previous button is pressed.
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    /**
    * This method clears all error labels on the form.
    */
   void clearErrorLabels() {
        // erase error label text and set visibility to false
        lblUsernameError.setText("");
        lblUsernameError.setVisible(false);
        lblPasswordError.setText("");
        lblPasswordError.setVisible(false);
        lblConfirmPasswordError.setText("");
        lblConfirmPasswordError.setVisible(false);
        lblNameError.setText("");
        lblNameError.setVisible(false);
        lblEmailError.setText("");
        lblEmailError.setVisible(false);
    }

   /**
    * This method checks if the provided string can be parsed as an integer.
    * @param s The string to check.
    * @return true if the string can be parsed as an integer, false otherwise.
    */
   public boolean isInteger(String s) {
       try {
           Integer.parseInt(s);
           return true;
       } catch (NumberFormatException ex) {
           return false;
       }
   }

   /**
    * This method checks if the provided string can be parsed as a double.
    * @param s The string to check.
    * @return true if the string can be parsed as a double, false otherwise.
    */
   public boolean isDouble(String s) {
       try {
           Double.parseDouble(s);
           return true;
       } catch (NumberFormatException ex) {
           return false;
       }
   }

   /**
    * Validates if the entered password and its confirmation match and are not empty.
    *
    * @return true if the password is valid, otherwise false.
    */
    boolean isValidPassword() {
       boolean result = true; 

       // Check if password is empty
       if (txtPassword.getText().trim().isEmpty()) {
           lblPasswordError.setText("Invalid. Cannot be empty.");
           lblPasswordError.setVisible(true);
           result = false;
       }

       // Check if confirmation matches the password
       if (!txtConfirmPassword.getText().trim().equals(txtPassword.getText().trim())) {
           lblConfirmPasswordError.setText("Invalid. Password does not match.");
           lblConfirmPasswordError.setVisible(true);
           result = false;
       }

       return result;
   }
    
    /**
    * Checks if a username already exists in the database.
    *
    * @param username The username to check for duplicates.
    * @return true if the username already exists, otherwise false.
    * @throws SQLException If there's an error executing the SQL query.
    */
    private boolean isDuplicate(String username) throws SQLException {
        String stmtSQL = "SELECT username FROM account WHERE username = '" + username.toLowerCase()+ "'";
        rs = dbCon.executeStatement(stmtSQL);

        if (rs.isBeforeFirst() && !ogUsername.equalsIgnoreCase(txtUsername.getText().trim())) lblUsernameError.setText("Username already taken.");
        lblUsernameError.setVisible(true);
        
        // Check if the resultset has data which indicates a duplicate
        return rs.isBeforeFirst();
    }
   
   /**
    * This method validates the data entered in the form.
    * @return true if all data is valid, false if any data is invalid.
    */
   boolean isValidData() {
       boolean result = true;

       // Check if name is empty or too long
       if (txtName.getText().trim().isEmpty() || (txtName.getText().trim().length() > 20)) {
           if (txtName.getText().trim().isEmpty()) {
               lblNameError.setText("Invalid. Cannot be empty.");
           } else if (txtName.getText().trim().length() > 20) {
               lblNameError.setText("Invalid. Must be < 21 chars.");
           }
           lblNameError.setVisible(true);
           result = false;
       }

       // Check if username is empty or too long
       if (txtUsername.getText().trim().isEmpty() || (txtUsername.getText().trim().length() > 30)) {
           if (txtUsername.getText().trim().isEmpty()) {
               lblUsernameError.setText("Invalid. Cannot be empty.");
           } else if (txtUsername.getText().trim().length() > 30) {
               lblUsernameError.setText("Invalid. Must be < 31 chars.");
           }
           lblUsernameError.setVisible(true);
           result = false;
       }
       
       // Check if email is too long
       if (txtEmail.getText().trim().length() > 30) {
           if (txtEmail.getText().trim().length() > 30) {
               lblUsernameError.setText("Invalid. Must be < 31 chars.");
           }
           lblEmailError.setVisible(true);
           result = false;
       }

       return result;
   }

   /**
    * Validates all the user input fields.
    *
    * @return true if all entered data is valid, otherwise false.
    */
   boolean isValidAll() {
       clearErrorLabels();
       boolean result = isValidData();

       // Ensure both data and password are valid
       return isValidPassword() && result;
   }
   
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (user.username.equalsIgnoreCase(ogUsername)) {
            JOptionPane.showMessageDialog(null, "Can't update your account from here.");
            return;  // Exit the method
        }
        // Prompt the user for confirmation before proceeding with the update.
        int returnValue = JOptionPane.showConfirmDialog(this, "Are you sure you want to update?", "Warning", JOptionPane.YES_NO_OPTION);
        if (returnValue != JOptionPane.YES_OPTION) {
            return;  // Exit the method if user selects "No"
        }

        try {
            // Validate all input fields and check for duplicate usernames.
            if (isValidAll() && (!isDuplicate(txtUsername.getText().trim()) || ogUsername.equalsIgnoreCase(txtUsername.getText()))) {

                // Prepare the SQL UPDATE statement.
                String prepSQL = "UPDATE account SET name = '" + txtName.getText().trim() +
                "', username = '" + txtUsername.getText().trim() +
                "', password = '" + md5.getMD5(txtPassword.getText().trim()) +  // Using MD5 for password, though not the safest.
                "', email = '" + txtEmail.getText().toString() +
                "' WHERE username = '" + ogUsername + "'";

                String prepSQL1 = "UPDATE employee SET employeeType = '" + cmbEmployeeType.getSelectedItem().toString().toLowerCase() +
                "' WHERE username = '" + ogUsername + "'";

                String prepSQL3 = "INSERT INTO administrator values ('" + txtUsername.getText().trim().toLowerCase() + "')";

                
                // Execute the prepared SQL statement.
                int result = dbCon.executePrepared(prepSQL);
                int result1 = dbCon.executePrepared(prepSQL1);
                if (cmbEmployeeType.getSelectedItem().toString().equalsIgnoreCase("admin")){
                    dbCon.executePrepared(prepSQL3);
                } 
                else 
                {
                    String prepSQL5 = "DELETE administrator WHERE username = '" + txtUsername.getText().trim() + "'";
                    dbCon.executePrepared(prepSQL5);
                }

                // Check the result and provide appropriate feedback to the user.
                if (result > 0 && result1 > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("User " + ogUsername + " updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    getNewData();  // Refresh the data
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("User not updated. Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                // If validation fails, inform the user about the validation errors.
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            // Catch SQL exceptions and show an error message to the user.
            JOptionPane.showMessageDialog(null, "Error updating user." + e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void ToggleConfirmPasswordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleConfirmPasswordBtnActionPerformed
        // Check if the toggle button is selected.
        if (ToggleConfirmPasswordBtn.isSelected())
        {
            // If the toggle button is selected, set the echo characters of the password and confirm password fields to 0.
            // This effectively makes the characters in these fields visible.
            txtConfirmPassword.setEchoChar((char)0);
        }
        else
        {
            // If the toggle button is not selected, set the echo characters of the password and confirm password fields to '•'.
            // This hides the characters in these fields, replacing them with '•' symbols.
            txtConfirmPassword.setEchoChar('•');
        }
    }//GEN-LAST:event_ToggleConfirmPasswordBtnActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void TogglePasswordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TogglePasswordBtnActionPerformed

        // Check if the toggle button is selected.
        if (TogglePasswordBtn.isSelected())
        {
            // If the toggle button is selected, set the echo characters of the password and confirm password fields to 0.
            // This effectively makes the characters in these fields visible.
            txtPassword.setEchoChar((char)0);
        }
        else
        {
            // If the toggle button is not selected, set the echo characters of the password and confirm password fields to '•'.
            // This hides the characters in these fields, replacing them with '•' symbols.
            txtPassword.setEchoChar('•');
        }
    }//GEN-LAST:event_TogglePasswordBtnActionPerformed

    private void cmbEmployeeTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEmployeeTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbEmployeeTypeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ToggleConfirmPasswordBtn;
    private javax.swing.JToggleButton TogglePasswordBtn;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbEmployeeType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblConfirmPasswordError;
    private javax.swing.JLabel lblEmailError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPasswordError;
    private javax.swing.JLabel lblUsernameError;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
