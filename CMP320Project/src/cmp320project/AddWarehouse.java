package cmp320project;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author baraa
 */
public class AddWarehouse extends javax.swing.JFrame {

    /**
     * Creates new form AddWarehouse
     */
    
    myDBCon dbCon;
    ResultSet rs;
    ResultSet rsCheck2;
    EncryptionMD5 md5;
    LoginUser user;
    
    public AddWarehouse(LoginUser _user) {
        initComponents();
        this.setLocationRelativeTo(null); // center form in screen 
        
        // Getting current user
        user = _user;
        
        // Initialize the database connection
        dbCon = new myDBCon();
        
        // Initializing MD5 Hasher
        md5 = new EncryptionMD5();
        
        // set all error labels to invisible
        lblIDError.setVisible(false);
        lblLocationError.setVisible(false);
        lblCapacityError.setVisible(false);
        
        // Give product ID
        txtID.setText(Integer.toString(generateID()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCapacityError = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCapacity = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnAddNewEmp = new javax.swing.JButton();
        lblLocationError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblIDError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblCapacityError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblCapacityError.setForeground(new java.awt.Color(255, 0, 0));
        lblCapacityError.setText("error label");

        txtLocation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Location:");

        txtCapacity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCapacityActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Add New Warehouse");

        txtID.setEditable(false);
        txtID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnAddNewEmp.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnAddNewEmp.setText("Add New");
        btnAddNewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEmpActionPerformed(evt);
            }
        });

        lblLocationError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLocationError.setForeground(new java.awt.Color(255, 0, 0));
        lblLocationError.setText("error label");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Capacity:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("ID:");

        lblIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblIDError.setText("error label");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCapacity, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(txtID)
                    .addComponent(txtLocation)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btnAddNewEmp)))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblIDError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblLocationError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCapacityError, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(188, 188, 188))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIDError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLocationError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblCapacityError)
                    .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAddNewEmp)
                .addGap(0, 53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void clearErrorLabels() {
        // erase error label text and set visibility to false
        lblIDError.setText("");
        lblIDError.setVisible(false);
        lblLocationError.setText("");
        lblLocationError.setVisible(false);
        lblCapacityError.setText("");
        lblCapacityError.setVisible(false);
    }
    
    private int generateID()
    {
        try {
            rsCheck2 = dbCon.executeStatement("SELECT MAX(warehouseID) AS ID FROM warehouse");
            rsCheck2.next();
            return rsCheck2.getInt("ID") + 1;
        } catch (SQLException ex) {
            // Catch SQL exceptions and show an error message to the user.
            JOptionPane.showMessageDialog(null, "Error generating ID.");
        }
        return -1;
    }
    
    private boolean isDuplicate(String ID) throws SQLException {
        String stmtSQL = "SELECT warehouseID FROM warehouse WHERE warehouseID = " + ID.trim();
        rs = dbCon.executeStatement(stmtSQL);

        if (rs.isBeforeFirst()) lblIDError.setText("ID already taken.");
        lblIDError.setVisible(true);
        
        // Check if the resultset has data which indicates a duplicate
        return rs.isBeforeFirst();
    }
    
    // verify valid entry of integer values
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    
     /**
    * Validates the data entered by the user.
    *
    * @return true if the entered data is valid, otherwise false.
    */
   boolean isValidData() {
       boolean result = true;
       
       // clears error labels
       clearErrorLabels();

       // Check if ID is empty or out of range or not Int
       if (txtID.getText().trim().isEmpty() || !isInteger(txtID.getText().trim()) || (Integer.parseInt(txtID.getText().trim()) < 0 || Integer.parseInt(txtID.getText().trim()) > 99999)) {
           if (txtID.getText().trim().isEmpty()) {
               lblIDError.setText("Invalid. Cannot be empty.");
           } else if (!isInteger(txtID.getText().trim()) || (Integer.parseInt(txtID.getText().trim()) < 0 || Integer.parseInt(txtID.getText().trim()) > 99999)) {
               lblIDError.setText("Invalid. Must be a 5 digit positive number.");
           }
           lblIDError.setVisible(true);
           result = false;
       }

       // Check if username is empty or too long
       if (txtLocation.getText().trim().isEmpty() || (txtLocation.getText().trim().length() > 30)) {
           if (txtLocation.getText().trim().isEmpty()) {
               lblLocationError.setText("Invalid. Cannot be empty.");
           } else if (txtLocation.getText().trim().length() > 30) {
               lblLocationError.setText("Invalid. Must be < 31 chars.");
           }
           lblLocationError.setVisible(true);
           result = false;
       }
       
       // Check if ID is empty or negative or not Int
       if (txtCapacity.getText().trim().isEmpty() || !isInteger(txtCapacity.getText().trim()) || Integer.parseInt(txtCapacity.getText().trim()) < 0 ) {
           if (txtCapacity.getText().trim().isEmpty()) {
               lblCapacityError.setText("Invalid. Cannot be empty.");
           } else if (!isInteger(txtCapacity.getText().trim()) || Integer.parseInt(txtCapacity.getText().trim()) < 0) {
               lblCapacityError.setText("Invalid. Must be a 5 digit positive number.");
           }
           lblCapacityError.setVisible(true);
           result = false;
       }
       
       return result;
   }
   
    /**
    * Clears all the input fields and resets them to default values.
    */
   void clearInputBoxes() {
       txtLocation.setText("");
       txtCapacity.setText("");
   }
    
    private void txtCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCapacityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCapacityActionPerformed

    private void btnAddNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEmpActionPerformed
        try {
            // Check if the entered data is valid and the username does not already exist in the database.
            if (isValidData() && !isDuplicate(txtID.getText().trim())) {

                // Prepare SQL query to insert the new user into the database.
                String prepSQL = "INSERT INTO warehouse (warehouseID, location, capacity, username) VALUES ("
                + txtID.getText().trim().toLowerCase() + ", "
                + "'" + txtLocation.getText().trim() + "', "
                + txtCapacity.getText().trim() + ", "
                + "'" + user.username.toLowerCase() + "')";

                // Execute the prepared SQL statement.
                int result1 = dbCon.executePrepared(prepSQL);

                // If the SQL statement executed successfully and a new user was added,
                // inform the user with a success message.
                if (result1 > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    // Clear the input fields after successful insertion.
                    clearInputBoxes();
                    this.dispose();
                } // Handle other cases where the user was not added. This section can be expanded.

                rs.close();
            } else {
                // If there are validation errors, inform the user to fix them.
                // Otherwise, inform the user if the entered username already exists.
                if (!isDuplicate(txtID.getText().trim())) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("ID Already exists. Use a different ID.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            // Handle any SQL exceptions and inform the user with an error message.
            JOptionPane.showMessageDialog(null, "Error registering new warehouse.");
        }
    }//GEN-LAST:event_btnAddNewEmpActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewEmp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblCapacityError;
    private javax.swing.JLabel lblIDError;
    private javax.swing.JLabel lblLocationError;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLocation;
    // End of variables declaration//GEN-END:variables
}
