package cmp320project;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;


/**
 *
 * @author baraa
 */
public class AddProduct extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    ResultSet rsCheck1;
    ResultSet rsCheck2;
    LoginUser user;
    ResultSet rsCheck3;
    
    /**
     * Creates new form AddProduct
     */
    public AddProduct(LoginUser _user) {
        initComponents();
        this.setLocationRelativeTo(null); // center form in screen 
        
        // Getting current user
        user = _user;
        
        // Initialize the database connection
        dbCon = new myDBCon();
        
        // set all error labels to invisible
        lblIDError.setVisible(false);
        lblNameError.setVisible(false);
        lblPriceError.setVisible(false);
        lblSizeError.setVisible(false);
        lblQuantityError.setVisible(false);
        
        // Give product ID
        txtID.setText(Integer.toString(generateID()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSize = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnAddNewEmp = new javax.swing.JButton();
        lblNameError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblIDError = new javax.swing.JLabel();
        lblSizeError = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblPriceError = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        lblQuantityError = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        txtSize.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSizeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Add New Product");

        txtID.setEditable(false);
        txtID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnAddNewEmp.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnAddNewEmp.setText("Add New");
        btnAddNewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEmpActionPerformed(evt);
            }
        });

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Size:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("ID:");

        lblIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblIDError.setText("error label");

        lblSizeError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblSizeError.setForeground(new java.awt.Color(255, 0, 0));
        lblSizeError.setText("error label");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Name:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Price:");

        lblPriceError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPriceError.setForeground(new java.awt.Color(255, 0, 0));
        lblPriceError.setText("error label");

        txtPrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Quantity:");

        lblQuantityError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblQuantityError.setForeground(new java.awt.Color(255, 0, 0));
        lblQuantityError.setText("error label");

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtSize)
                            .addComponent(txtPrice)
                            .addComponent(txtID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtQuantity))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblIDError, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                                    .addComponent(lblNameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSizeError, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPriceError, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblQuantityError, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(318, 318, 318)
                        .addComponent(btnAddNewEmp))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIDError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPriceError)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(lblSizeError)
                    .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuantityError)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1)
                .addComponent(btnAddNewEmp)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void clearErrorLabels() {
        // erase error label text and set visibility to false
        lblIDError.setText("");
        lblIDError.setVisible(false);
        lblNameError.setText("");
        lblNameError.setVisible(false);
        lblPriceError.setText("");
        lblPriceError.setVisible(false);
        lblSizeError.setText("");
        lblSizeError.setVisible(false);
        lblQuantityError.setText("");
        lblQuantityError.setVisible(false);
    }
    
    private int generateID()
    {
        try {
            rsCheck3 = dbCon.executeStatement("SELECT MAX(productID) AS ID FROM product");
            rsCheck3.next();
            return rsCheck3.getInt("ID") + 1;
        } catch (SQLException ex) {
            // Catch SQL exceptions and show an error message to the user.
            JOptionPane.showMessageDialog(null, "Error generating ID.");
        }
        return -1;
    }
    
    private boolean isDuplicate(String ID) throws SQLException {
        String stmtSQL = "SELECT productID FROM product WHERE productID = " + ID.trim();
        rs = dbCon.executeStatement(stmtSQL);

        if (rs.isBeforeFirst()) lblIDError.setText("ID already taken.");
        lblIDError.setVisible(true);
        
        // Check if the resultset has data which indicates a duplicate
        return rs.isBeforeFirst();
    }
    
    // verify valid entry of integer values
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    
     /**
    * Validates the data entered by the user.
    *
    * @return true if the entered data is valid, otherwise false.
    */
   boolean isValidData() {
       boolean result = true;
       
       // clears error labels
       clearErrorLabels();

       // Check if ID is empty or out of range or not Int
       if (txtID.getText().trim().isEmpty() || !isInteger(txtID.getText().trim()) || (Integer.parseInt(txtID.getText().trim()) < 0 || Integer.parseInt(txtID.getText().trim()) > 99999)) {
           if (txtID.getText().trim().isEmpty()) {
               lblIDError.setText("Invalid. Cannot be empty.");
           } else if (!isInteger(txtID.getText().trim()) || (Integer.parseInt(txtID.getText().trim()) < 0 || Integer.parseInt(txtID.getText().trim()) > 99999)) {
               lblIDError.setText("Invalid. Must be a 5 digit positive number.");
           }
           lblIDError.setVisible(true);
           result = false;
       }

       // Check if username is empty or too long
       if (txtName.getText().trim().isEmpty() || (txtName.getText().trim().length() > 30)) {
           if (txtName.getText().trim().isEmpty()) {
               lblNameError.setText("Invalid. Cannot be empty.");
           } else if (txtName.getText().trim().length() > 30) {
               lblNameError.setText("Invalid. Must be < 31 chars.");
           }
           lblNameError.setVisible(true);
           result = false;
       }
       
       // Check if ID is empty or negative or not Int
       if (txtSize.getText().trim().isEmpty() || !isInteger(txtSize.getText().trim()) || Integer.parseInt(txtSize.getText().trim()) < 0 ) {
           if (txtSize.getText().trim().isEmpty()) {
               lblSizeError.setText("Invalid. Cannot be empty.");
           } else if (!isInteger(txtSize.getText().trim()) || Integer.parseInt(txtSize.getText().trim()) < 0) {
               lblSizeError.setText("Invalid. Must be a 5 digit positive number.");
           }
           lblSizeError.setVisible(true);
           result = false;
       }
       
       // Check if price is empty or out of range or not a number
       if (txtPrice.getText().trim().isEmpty() || !(isInteger(txtPrice.getText().trim()) || isDouble(txtPrice.getText().trim())) || (Double.parseDouble(txtPrice.getText().trim()) < 0 || Double.parseDouble(txtPrice.getText().trim()) > 999999999.99 )) {
           if (txtPrice.getText().trim().isEmpty()) {
               lblPriceError.setText("Invalid. Cannot be empty.");
           } else if (!(isInteger(txtPrice.getText().trim()) || isDouble(txtPrice.getText().trim()))) {
               lblPriceError.setText("Invalid. Must be a number.");
           } else if ((Double.parseDouble(txtPrice.getText().trim()) < 0 || Double.parseDouble(txtPrice.getText().trim()) > 999999999.99 )) {
               lblPriceError.setText("Invalid. Must be a positive number less then 1,000,000,000.");
           } 
           lblPriceError.setVisible(true);
           result = false;
       }
       
       // Check if ID is empty or negative or not Int
       if (txtQuantity.getText().trim().isEmpty() || !isInteger(txtQuantity.getText().trim()) || Integer.parseInt(txtQuantity.getText().trim()) < 0 ) {
           if (txtQuantity.getText().trim().isEmpty()) {
               lblQuantityError.setText("Invalid. Cannot be empty.");
           } else if (!isInteger(txtQuantity.getText().trim()) || Integer.parseInt(txtQuantity.getText().trim()) < 0) {
               lblQuantityError.setText("Invalid. Must be a 5 digit positive number.");
           }
           lblQuantityError.setVisible(true);
           result = false;
       }
       
       return result;
   }
   
    /**
    * Clears all the input fields and resets them to default values.
    */
   void clearInputBoxes() {
       txtName.setText("");
       txtPrice.setText("");
       txtSize.setText("");
       txtQuantity.setText("");
   }
    
    private void txtSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSizeActionPerformed

    private void btnAddNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEmpActionPerformed
        try {
            // Check if the entered data is valid and the username does not already exist in the database.
            if (isValidData() && !isDuplicate(txtID.getText().trim())) {

                // Prepare SQL query to insert the new product into the database.
                String prepSQL = "INSERT INTO product (productID, Name, Price, \"Size\") VALUES ("
                + txtID.getText().trim().toLowerCase() + ", "
                + "'" + txtName.getText().trim().toLowerCase() + "', "
                + txtPrice.getText().trim() + ", "
                + txtSize.getText().trim() + ")";
                
                // Prepare SQL query to insert the record into supplies.
                String prepSQL1 = "INSERT INTO supplies (username, productID, quantity, lastupdated) VALUES ("
                + "'" + user.username.toLowerCase() + "', "
                + "" + txtID.getText().trim() + ", "
                + txtQuantity.getText().trim() + ", "
                + "CURRENT_DATE)";
                

                // Prepare SQL query to insert the new product into the stores.
                String prepSQL2 = "INSERT INTO stores (warehouseID, productID, Quantity) VALUES (0, "
                + txtID.getText().trim() + ", "
                + txtQuantity.getText().trim() + ")";
                
                // Execute the prepared SQL statement.
                rsCheck1 = dbCon.executeStatement("SELECT SUM(\"Size\" * Quantity) AS UsedCapacity FROM stores S JOIN product P ON S.ProductID = P.ProductID WHERE WarehouseID = 0");
                rsCheck2 = dbCon.executeStatement("SELECT Capacity FROM warehouse WHERE warehouseID = 0");
                rsCheck1.next();
                rsCheck2.next();
                
                if (rsCheck1.getInt("UsedCapacity") + (Integer.parseInt(txtSize.getText().trim()) * Integer.parseInt(txtQuantity.getText().trim())) > rsCheck2.getInt("Capacity"))
                {
                    JOptionPane.showMessageDialog(null, "Insufficient space in the warehosue. Please try again later.");
                    return; //exiting function
                }
                
                int result = dbCon.executePrepared(prepSQL);
                int result1 = dbCon.executePrepared(prepSQL1);
                int result2 = dbCon.executePrepared(prepSQL2);

                // If the SQL statement executed successfully and a new user was added,
                // inform the user with a success message.
                if (result > 0 && result1 > 0 && result2 > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    // Clear the input fields after successful insertion.
                    clearInputBoxes();
                    this.dispose();
                } // Handle other cases where the user was not added. This section can be expanded.

                rs.close();
            } else {
                // If there are validation errors, inform the user to fix them.
                // Otherwise, inform the user if the entered username already exists.
                if (!isDuplicate(txtID.getText().trim())) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("ID Already exists. Use a different ID.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            // Handle any SQL exceptions and inform the user with an error message.
            JOptionPane.showMessageDialog(null, "Error registering new product.");
        }
    }//GEN-LAST:event_btnAddNewEmpActionPerformed

    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewEmp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblIDError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPriceError;
    private javax.swing.JLabel lblQuantityError;
    private javax.swing.JLabel lblSizeError;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSize;
    // End of variables declaration//GEN-END:variables
}
