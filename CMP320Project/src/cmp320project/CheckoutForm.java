package cmp320project;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author baraa
 */
public class CheckoutForm extends javax.swing.JFrame {

    myDBCon dbCon;              // Database connection object
    ResultSet rs;               // Result set for account data
    ResultSet rsCheck1;          // Result Set for warehouse capacity data
    ResultSet rsCheck2;          // Result Set for warehouse capacity data
    LoginUser user;             // Stores currently logged in user
    ShoppingCart parent;
    
    /**
     * Creates new form CheckoutForm
     */
    public CheckoutForm(LoginUser _user, ShoppingCart _parent) {
        // Initializes GUI components created using the form editor in NetBeans or similar IDE
        initComponents();
        
        // Defining parent
        parent = _parent;

        // Positions this JFrame to the center of the screen
        this.setLocationRelativeTo(null);
        
        // Initialize the database connection
        dbCon = new myDBCon();
        
        // getting supplier
        user = _user;
        
        // Call function to populate table
        populateTable();
    }
    
    private double totalPrice(ArrayList<OrderLine> arr)
    {
        double total = 0;
        for(OrderLine line:arr)
        {
            total += line.getLineTotal();
        }
        
        return total;
    }
    
    private void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) jCheckoutTable.getModel();
        Object[] temp = {null, null, null ,null};
        for (OrderLine line:OrderLine.orderLineList.get(user.username))
        {
            temp = new Object[]{line.getProductID(), line.getName(), line.getQuantity(), line.getLineTotal()};
            model.addRow(temp);
        }
        temp = new Object[]{"Total","","", totalPrice(OrderLine.orderLineList.get(user.username))};
        model.addRow(temp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jCheckoutTable = new javax.swing.JTable();
        btnBuy = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jCheckoutTable.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jCheckoutTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "Product Name", "Quantity", "Price"
            }
        ));
        jCheckoutTable.setToolTipText("");
        jCheckoutTable.setEnabled(false);
        jScrollPane1.setViewportView(jCheckoutTable);

        btnBuy.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnBuy.setText("Buy Now");
        btnBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(312, 312, 312)
                .addComponent(btnBuy)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuy)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int generateID()
    {
        try {
            rsCheck2 = dbCon.executeStatement("SELECT MAX(orderID) AS ID FROM \"Order\"");
            rsCheck2.next();
            return rsCheck2.getInt("ID") + 1;
        } catch (SQLException ex) {
            // Catch SQL exceptions and show an error message to the user.
            JOptionPane.showMessageDialog(null, "Error generating ID.");
        }
        return -1;
    }
    
    private void btnBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyActionPerformed
        try {
            //checking if budget is enough
            rsCheck1 = dbCon.executeStatement("SELECT Budget FROM Customer WHERE username = '" + user.username + "'");
            rsCheck1.next();
            if(Double.parseDouble(rsCheck1.getString("Budget")) > totalPrice(OrderLine.orderLineList.get(user.username)))
            {
                String ID = Integer.toString(generateID());
                // creating order in database
                String prepSQL = "INSERT INTO \"Order\" (orderID, totalPrice, OrderDate, Username) VALUES ("
                        + ID +  ", "
                        + Double.toString(totalPrice(OrderLine.orderLineList.get(user.username))) + ", "                        
                        + "CURRENT_DATE, "                      
                        + "'" + user.username + "')";
                int result = dbCon.executePrepared(prepSQL);
                // adding orderlines
                String prepSQL1;
                int index = 0;
                for (OrderLine line: OrderLine.orderLineList.get(user.username))
                {
                    prepSQL1 = "INSERT INTO OrderLine (Linenumber, linetotal, orderID, productID, quantity) VALUES ("
                        + Integer.toString(index) + ", "
                        + Double.toString(line.getLineTotal()) + ", "
                        + ID + ", "                        
                        + Integer.toString(line.getProductID()) + ", "                      
                        + Integer.toString(line.getQuantity()) + ")";
                    
                    dbCon.executePrepared(prepSQL1);
                    
                    //Removing quantity from stock
                    String prepSQL2 = "UPDATE stores SET quantity = quantity - " + Integer.toString(line.getQuantity()) + " WHERE productID = " + Integer.toString(line.getProductID());
                    String prepSQL3 = "UPDATE supplies SET quantity = quantity - " + Integer.toString(line.getQuantity()) + " WHERE productID = " + Integer.toString(line.getProductID());
                    String prepSQL4 = "UPDATE transfer SET quantity = quantity - " + Integer.toString(line.getQuantity()) + " WHERE productID = " + Integer.toString(line.getProductID());
                    dbCon.executePrepared(prepSQL2);
                    dbCon.executePrepared(prepSQL3);
                    dbCon.executePrepared(prepSQL4);
                    index++;
                }
                                
                // Updating customer budget
                String prepSQL5 = "UPDATE customer SET budget = budget - " + Double.toString(totalPrice(OrderLine.orderLineList.get(user.username))) + " WHERE username = '" + user.username + "'";
                dbCon.executePrepared(prepSQL5);
                
                // Check the result and provide appropriate feedback to the user.
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Checkout completed successfully");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    parent.dispose();
                    OrderLine.orderLineList.remove(user.username);
                    this.dispose();
                } else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Error...");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Your budget is insufficient" );
            }
        } catch (SQLException ex) {
            // Catch SQL exceptions and show an error message to the user.
            JOptionPane.showMessageDialog(null, "Error updating Product." + ex.getMessage());
        }
    }//GEN-LAST:event_btnBuyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuy;
    private javax.swing.JTable jCheckoutTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
